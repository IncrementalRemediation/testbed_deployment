# Source:
# https://github.com/Metaswitch/clearwater-heat.git
# Branch: single-yaml-file

# Project Clearwater - IMS in the Cloud
# Copyright (C) 2015  Metaswitch Networks Ltd
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version, along with the "Special Exception" for use of
# the program along with SSL, set forth below. This program is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details. You should have received a copy of the GNU General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
# The author can be reached by email at clearwater@metaswitch.com or by
# post at Metaswitch Networks Ltd, 100 Church St, Enfield EN2 6BQ, UK
#
# Special Exception
# Metaswitch Networks Ltd  grants you permission to copy, modify,
# propagate, and distribute a work formed by combining OpenSSL with The
# Software, or a work derivative of such a combination, even if such
# copying, modification, propagation, or distribution would otherwise
# violate the terms of the GPL. You must comply with the GPL in all
# respects for all of the code used other than OpenSSL.
# "OpenSSL" means OpenSSL toolkit software distributed by the OpenSSL
# Project and licensed under the OpenSSL Licenses, or a work based on such
# software and licensed under the OpenSSL Licenses.
# "OpenSSL Licenses" means the OpenSSL License and Original SSLeay License
# under which the OpenSSL Project distributes the OpenSSL toolkit software,
# as those licenses appear in the file LICENSE-OPENSSL.

heat_template_version: 2013-05-23

description: >
  Clearwater deployment

parameters:
  internet_net_id:
    type: string
    description: ID of internet network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  public_net_id:
    type: string
    description: ID of public network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  public_net_cidr:
    type: string
    description: Subnet address of public network
    default: 10.0.42.0/24
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
    default: 10.0.0.0/24
  private_net_pool_start:
    type: string
    description: Start of private network IP address pool
    default: 10.0.0.3
  private_net_pool_end:
    type: string
    description: End of private network IP address pool
    default: 10.0.0.254
  flavor:
    type: string
    description: Flavor to use
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a valid flavor name
  flavor_cassandra:
    type: string
    description: Flavor to use
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a valid flavor name
  image:
    type: string
    description: Name of image to use
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid image name
  key_name:
    type: string
    description: Name of keypair to assign
    constraints:
      - custom_constraint: nova.keypair
        description: Must be a valid keypair name
  zone_load:
    type: string
    description: Availability zone to spawn the VMs generating system load
    default: cw_load
  zone_storage:
    type: string
    description: Availability zone to spawn the storage VMs
    default: cw_storage
  zone_core:
    type: string
    description: Availability zone to spawn the IMS core and manage VMs
    default: cw_core
  zone:
    type: string
    description: DNS zone
    default: ims4
  swarm_manager_size:
    type: number
    description: Number of swarm managers
    default: 1
  etcd_cluster_size:
    type: number
    description: Number of Etcd nodes
    default: 1
  ellis_cluster_size:
    type: number
    description: Number of Ellis nodes
    default: 1
  bono_cluster_size:
    type: number
    description: Number of Bono nodes in Bono cluster
    default: 1
  sprout_cluster_size:
    type: number
    description: Number of Sprout nodes in Sprout cluster
    default: 1
  homer_cluster_size:
    type: number
    description: Number of Homer nodes in Homer cluster
    default: 1
  homestead_cluster_size:
    type: number
    description: Number of Homestead nodes in Homestead cluster
    default: 1
  ralf_cluster_size:
    type: number
    description: Number of Ralf nodes in Ralf cluster
    default: 1
  cassandra_cluster_size:
    type: number
    description: Number of Ralf nodes in Cassandra cluster
    default: 1
  chronos_cluster_size:
    type: number
    description: Number of Ralf nodes in Chronos cluster
    default: 1
  astaire_cluster_size:
    type: number
    description: Number of Ralf nodes in Astaire cluster
    default: 1
  homestead_prov_cluster_size:
    type: number
    description: Number of Ralf nodes in Homestead Prov cluster
    default: 1
  sipp_stress_cluster_size:
    type: number
    description: Number of Ralf nodes in Sipp Stress cluster
    default: 1
  root_init_script:
    type: string
    description: Setup script. Empty by default, handled by Ansible.
    default: ""

resources:

  # From network.yaml...
  network_private_net:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { __stack__: { get_param: "OS::stack_name" } }, template: __stack__-private } }

  network_private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { __stack__: { get_param: "OS::stack_name" } }, template: __stack__-private } }
      network_id: { get_resource: network_private_net }
      cidr: { get_param: private_net_cidr }
      #dns_nameservers:
      #  - 193.174.75.142
      #  - 130.149.7.7
      gateway_ip: 10.0.0.1
      #host_routes:
      #  - nexthop: 10.0.0.2
      #    destination: { get_param: public_net_cidr }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  internet_router:
    type: OS::Neutron::Router
    properties:
      name: { str_replace: { params: { __stack__: { get_param: "OS::stack_name" } }, template: __stack__-internet-router } }

  internet_router_gateway:
    type: OS::Neutron::RouterGateway
    properties:
      router_id: { get_resource: internet_router }
      network_id: { get_param: internet_net_id }

  internet_router_interface_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network_private_net }
      fixed_ips:
        - ip_address: 10.0.0.1
          subnet: { get_resource: network_private_subnet }

  internet_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: internet_router }
      port_id: { get_resource: internet_router_interface_port }

  network_router:
    type: OS::Neutron::Router
    properties:
      name: { str_replace: { params: { __stack__: { get_param: "OS::stack_name" } }, template: __stack__-private } }

  network_router_gateway:
    type: OS::Neutron::RouterGateway
    properties:
      router_id: { get_resource: network_router }
      network_id: { get_param: public_net_id }

  network_router_interface_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network_private_net }
      fixed_ips:
        - ip_address: 10.0.0.2
          subnet: { get_resource: network_private_subnet }

  network_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: network_router }
      port_id: { get_resource: network_router_interface_port }

  # From security-groups.yaml...
  security_groups_base:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-base } }
      description: Base security group for all Clearwater nodes
      rules:
        # All egress traffic
        - direction: egress
          ethertype: IPv4
        - direction: egress
          ethertype: IPv6

          # for the time being open it all, later figure it out which ports to open
        - direction: ingress
          ethertype: IPv4
        - direction: ingress
          ethertype: IPv6

        # ICMP
        - protocol: icmp
        # SSH
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        # Data-Collection-Agent
        - protocol: tcp
          port_range_min: 7777
          port_range_max: 7777
        # SNMP
        - protocol: udp
          port_range_min: 161
          port_range_max: 161
        # etcd
        - protocol: tcp
          port_range_min: 2379
          port_range_max: 2379
        - protocol: tcp
          port_range_min: 4001
          port_range_max: 4001
        - protocol: tcp
          port_range_min: 2380
          port_range_max: 2380
          #remote_mode: remote_group_id
          #remote_group_id: { get_resource: base } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 4000
          port_range_max: 4000
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: base } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 10050
          port_range_max: 10050
          remote_mode: remote_group_id
  security_groups_ellis:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-ellis } }
      description: Security group for Ellis nodes
      rules:
        # HTTP
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80
        # HTTPS
        - protocol: tcp
          port_range_min: 443
          port_range_max: 443

  security_groups_bono:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-bono } }
      description: Security group for Bono nodes
      rules:
        # STUN/TURN
        - protocol: udp
          port_range_min: 3478
          port_range_max: 3478
        - protocol: tcp
          port_range_min: 3478
          port_range_max: 3478
        # Internal SIP
        - protocol: tcp
          port_range_min: 5058
          port_range_max: 5058
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: bono } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 5058
          port_range_max: 5058
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_sprout }
        # External SIP
        - protocol: udp
          port_range_min: 5060
          port_range_max: 5060
        - protocol: tcp
          port_range_min: 5060
          port_range_max: 5060
        # External SIP/WebSocket
        - protocol: tcp
          port_range_min: 5062
          port_range_max: 5062
        # RTP
        - protocol: udp
          port_range_min: 32768
          port_range_max: 65535
        - protocol: tcp
          port_range_min: 5052
          port_range_max: 5052
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_sprout }


  security_groups_sprout:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-sprout } }
      description: Security group for Sprout nodes
      rules:
        # Internal SIP
        - protocol: tcp
          port_range_min: 5052
          port_range_max: 5052
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: sprout } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 5054
          port_range_max: 5054
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: sprout } # omit remote_group_id to reference yourself
        # Chronos
        - protocol: tcp
          port_range_min: 7253
          port_range_max: 7253
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: sprout } # omit remote_group_id to reference yourself
        # Chronos timer pops
        - protocol: tcp
          port_range_min: 9888
          port_range_max: 9888
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: sprout } # omit remote_group_id to reference yourself
        # Memcached
        - protocol: tcp
          port_range_min: 11211
          port_range_max: 11211
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: sprout } # omit remote_group_id to reference yourself

  security_groups_sprout2:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-sprout2 } }
      description: Additional security group for Sprout nodes (required to avoid circular dependency)
      #            Specifically, Bono and Sprout depend on each other, as do Sprout and Homestead.  By dividing Sprout's
      #            security group into one for other nodes to depend on (sprout) and a second to depend on other nodes
      #            (sprout2), we break this cycle.
      rules:
        # Internal SIP
        - protocol: tcp
          port_range_min: 5052
          port_range_max: 5052
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_bono }
        - protocol: tcp
          port_range_min: 5054
          port_range_max: 5054
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_bono }
        # Notifications from Homestead
        - protocol: tcp
          port_range_min: 9888
          port_range_max: 9888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_homestead }

  security_groups_homer:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-homer } }
      description: Security group for Homer nodes
      rules:
        # Ut/HTTP
        - protocol: tcp
          port_range_min: 7888
          port_range_max: 7888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_ellis }
        - protocol: tcp
          port_range_min: 7888
          port_range_max: 7888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_sprout }
        # Cassandra
        - protocol: tcp
          port_range_min: 7000
          port_range_max: 7000
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: homer } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 9160
          port_range_max: 9160
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: homer } # omit remote_group_id to reference yourself

  security_groups_homestead:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-homestead } }
      description: Security group for Homestead nodes
      rules:
        # Cx-like HTTP API
        - protocol: tcp
          port_range_min: 8888
          port_range_max: 8888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_bono }
        - protocol: tcp
          port_range_min: 8888
          port_range_max: 8888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_sprout }
        # REST-ful Provisioning API
        - protocol: tcp
          port_range_min: 8889
          port_range_max: 8889
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_ellis }
        # Cassandra
        - protocol: tcp
          port_range_min: 7000
          port_range_max: 7000
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: homestead } # omit remote_group_id to reference yourself
        - protocol: tcp
          port_range_min: 9160
          port_range_max: 9160
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: homestead } # omit remote_group_id to reference yourself

  security_groups_sipp-stress:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-sipp-stress } }
      description: Security group for sipp-stress nodes
      rules:
        # incoming calls
        - protocol: tcp
          port_range_min: 5060
          port_range_max: 5060
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_bono }

        - protocol: tcp
          port_range_min: 8888
          port_range_max: 8888
          remote_mode: remote_group_id

        # ? just open on vm
        - protocol: udp
          port_range_min: 6000
          port_range_max: 6000
          remote_mode: remote_group_id

        # ? just open on vm
        - protocol: udp
          port_range_min: 6002
          port_range_max: 6002
          remote_mode: remote_group_id

  security_groups_ralf:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-ralf } }
      description: Security group for Ralf nodes
      rules:
        # Rf-like/HTTP API
        - protocol: tcp
          port_range_min: 10888
          port_range_max: 10888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_bono }
        - protocol: tcp
          port_range_min: 10888
          port_range_max: 10888
          remote_mode: remote_group_id
          remote_group_id: { get_resource: security_groups_sprout }
        # Chronos
        - protocol: tcp
          port_range_min: 7253
          port_range_max: 7253
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: ralf } # omit remote_group_id to reference yourself
        # Chronos timer pops
        - protocol: tcp
          port_range_min: 10888
          port_range_max: 10888
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: ralf } # omit remote_group_id to reference yourself
        # Memcached
        - protocol: tcp
          port_range_min: 11211
          port_range_max: 11211
          remote_mode: remote_group_id
          #remote_group_id: { get_resource: ralf } # omit remote_group_id to reference yourself

  security_groups_cassandra:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-cassandra } }
      description: Security group for Cassandra
      rules:
        - protocol: tcp
          port_range_min: 7001
          port_range_max: 7001
          remote_mode: remote_group_id
        - protocol: tcp
          port_range_min: 9042
          port_range_max: 9042
          remote_mode: remote_group_id
        - protocol: tcp
          port_range_min: 9160
          port_range_max: 9160
          remote_mode: remote_group_id
        - protocol: tcp
          port_range_min: 32774
          port_range_max: 32774
          remote_mode: remote_group_id

  security_groups_chronos:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-chronos } }
      description: Security group for Chronos
      rules:
        - protocol: tcp
          port_range_min: 7253
          port_range_max: 7253
          remote_mode: remote_group_id
        - protocol: tcp
          port_range_min: 32776
          port_range_max: 32776
          remote_mode: remote_group_id
  security_groups_astaire:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-astaire } }
      description: Security group for Astaire
      rules:
        - protocol: tcp
          port_range_min: 11311
          port_range_max: 11311
          remote_mode: remote_group_id
        - protocol: tcp
          port_range_min: 32768
          port_range_max: 32768
          remote_mode: remote_group_id

  security_groups_homestead-prov:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-homestead-prov } }
      description: Security group for Homestead-Prov
      rules:
        - protocol: tcp
          port_range_min: 8889
          port_range_max: 8889
          remote_mode: remote_group_id
        - protocol: tcp
          port_range_min: 32771
          port_range_max: 32771
          remote_mode: remote_group_id

  security_groups_swarm:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-swarm } }
      description: Security group for Swarm
      rules:
        - protocol: tcp
          port_range_min: 2377
          port_range_max: 2377
          #remote_mode: remote_group_id
        - protocol: tcp
          port_range_min: 7946
          port_range_max: 7946
          #remote_mode: remote_group_id
        - protocol: udp
          port_range_min: 7946
          port_range_max: 7946
          #remote_mode: remote_group_id
        - protocol: tcp
          port_range_min: 4789
          port_range_max: 4789
          #remote_mode: remote_group_id

  affinity_group:
    type: OS::Nova::ServerGroup
    properties:
      policies:
      - soft-anti-affinity

  swarm_manager:
    depends_on: [ network_router_interface_port, network_router_gateway]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: swarm_manager_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: swarm_manager
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-swarm_manager-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_core }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
          root_setup: { get_param: root_init_script }
            
  etcd_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: etcd_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: etcd
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-etcd_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_core }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm}
          root_setup: { get_param: root_init_script }

  astaire_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, etcd_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: astaire_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: astaire
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-astaire_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_core }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
            - { get_resource: security_groups_astaire }
          root_setup: { get_param: root_init_script }

  cassandra_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, astaire_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: cassandra_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: cassandra
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-cassandra_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor_cassandra }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_storage }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
            - { get_resource: security_groups_cassandra }
          root_setup: { get_param: root_init_script }

  chronos_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, cassandra_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: chronos_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: chronos
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-chronos_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_core }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
            - { get_resource: security_groups_chronos }
          root_setup: { get_param: root_init_script }

  homestead_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, chronos_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: homestead_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: homestead
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-homestead_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_storage }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
            - { get_resource: security_groups_homestead }
          root_setup: { get_param: root_init_script }

  homesteadprov_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, chronos_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: homestead_prov_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: homesteadprov
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-homesteadprov_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_storage }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
            - { get_resource: security_groups_homestead-prov }
          root_setup: { get_param: root_init_script }

  homer_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, homesteadprov_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: homer_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: homer
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-homer_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_storage }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
            - { get_resource: security_groups_homer }
          root_setup: { get_param: root_init_script }

  ralf_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, homer_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: ralf_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: ralf
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-ralf_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_core }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
            - { get_resource: security_groups_ralf }
          root_setup: { get_param: root_init_script }

  sprout_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, ralf_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: sprout_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: sprout
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-sprout_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_core }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
            - { get_resource: security_groups_sprout }
            - { get_resource: security_groups_sprout2 }
          root_setup: { get_param: root_init_script }

  bono_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, sprout_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: bono_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: bono
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-bono_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_core }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
            - { get_resource: security_groups_bono }
          root_setup: { get_param: root_init_script }

  ellis_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, bono_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: ellis_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: ellis
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-ellis_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_storage }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
            - { get_resource: security_groups_ellis }
          root_setup: { get_param: root_init_script }

  sippstress_node:
    depends_on: [ network_router_interface_port, network_router_gateway, swarm_manager, ellis_node ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: sipp_stress_cluster_size }
      resource_def:
        type: server-floating.yaml
        properties:
          affinity_group: { get_resource: affinity_group }
          stack_name: { get_param: "OS::stack_name" }
          group: sippstress
          name: { str_replace: { params: { __index__: "%index%", __stack__: { get_param: "OS::stack_name" }, __zone__: { get_param: zone } }, template: __stack__-sippstress_node-__index__.__zone__ } }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          external_network: { get_param: public_net_id }
          network: { get_resource: network_private_net }
          availability_zone: { get_param: zone_load }
          security_groups:
            - { get_resource: security_groups_base }
            - { get_resource: security_groups_swarm }
          root_setup: { get_param: root_init_script }

outputs:
  zone:
    description: DNS zone
    value: { get_param: zone }
  swarm_manager_public_ips:
    description: Swarm Public IPs
    value: { get_attr: [swarm_manager, public_ip]}
  swarm_manager_private_ips:
    description: Swarm Private IPs
    value: { get_attr: [swarm_manager, ip]}
  etcd_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [etcd_node, ip]}
  ellis_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [ellis_node, ip]}
  bono_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [bono_node, ip]}
  sprout_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [sprout_node, ip]}
  homer_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [homer_node, ip]}
  homestead_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [homestead_node, ip]}
  cassandra_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [cassandra_node, ip]}
  astaire_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [astaire_node, ip]}
  homesteadprov_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [homesteadprov_node, ip]}
  chronos_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [chronos_node, ip]}
  ralf_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [ralf_node, ip]}
  sippstress_ips:
    description: Swarm node fixed_ips
    value: {get_attr: [sippstress_node, ip]}

  #dns_ip:
  #  description: IP address of DNS
  #  value: { get_attr: [ dns_server, public_ip ] }
  #sipp_stress_ip:
  #  description: IP address of sipp-stress server
  #  value: { get_attr: [ sipp-stress_server, public_ip ] }
