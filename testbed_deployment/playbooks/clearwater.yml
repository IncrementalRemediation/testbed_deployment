#!/usr/bin/env ansible-playbook

- name: Upgrade kernel
  hosts: astaire
  become: yes
  vars:
    kernel_version: "4.4.0-119-generic"
  tasks:
    - name: Upgrade linux kernel Step 1
      tags: [ kernel ]
      apt: 
        name: "linux-image-extra-{{ kernel_version }}"
        state: present
      register: kernel_1
    - name: Upgrade linux kernel Step 2
      tags: [ kernel ]
      apt: 
        name: "linux-image-extra-virtual"
        state: present
      register: kernel_2

- name: Set environment variable
  hosts: clearwater
  vars:
    env_var: { name: "HOSTNAME", value: "{{  inventory_hostname }}" }
  tasks:
    - name: "Set environment variable"
      lineinfile:
        path: /etc/environment
        regexp: "^{{ env_var.name }}="
        line: "{{ env_var.name }}={{ env_var.value }}"

- name: Copy log clean script
  hosts: clearwater
  become: true
  tags: [ "clean-logs" ]
  tasks:
    - name: Copy script
      copy:
        mode: preserve
        src: clearwater/clean-clearwater-docker-logs
        dest: /etc/cron.hourly/clean-clearwater-docker-logs

- name: Setup sipp stress VMs
  hosts:
    - sippstress
  become: yes
  tasks:
    - name: Create required sipp stress directories 
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ sipp.output_dir }}"
        - "{{ sipp.base_dir }}/config"

- name: Create Cassandra data directory
  hosts:
    - cassandra
  become: yes
  tasks:
    - file:
        path: /opt/cassandra-data
        state: directory

- name: Bootstrap docker swarm cluster
  hosts: swarm_manager[0]
  become: yes
  tasks:
    - include_tasks: docker-swarm/bootstrap_swarm_cluster.yml
    - include_tasks: docker-swarm/retrieve_join_tokens.yml
    - set_fact: swarm_manager_token={{ swarm_manager_token }}
    - set_fact: swarm_worker_token={{ swarm_worker_token }}

- name: Join docker swarm manager nodes
  hosts: swarm_manager[1:]
  become: yes
  vars:
    token_host: "{{ hostvars[inventory_hostname]['groups']['swarm_manager'][0] }}"
    token: "{{ hostvars[token_host]['swarm_manager_token'] }}"
    manager_ip: "{{ hostvars[token_host]['private_ip'] }}"
  tasks:
    - include_tasks: docker-swarm/join_swarm.yml    

- name: Join docker swarm worker nodes
  hosts:
    - clearwater:!swarm_manager
  become: yes
  vars:
    token_host: "{{ hostvars[inventory_hostname]['groups']['swarm_manager'][0] }}"
    token: "{{ hostvars[token_host]['swarm_worker_token'] }}"
    manager_ip: "{{ hostvars[token_host]['private_ip'] }}"
  tasks:
    - include_tasks: docker-swarm/join_swarm.yml

- name: Deploy docker swarm services
  hosts:
    - swarm_manager
  become: yes
  vars:
    docker_file: "docker-compose.yaml" # File name on the remote host
    stack_name: "cw"
  environment:
    ADDITIONAL_SHARED_CONFIG: "diameter_timeout_ms=600\nsprout_homestead_timeout_ms=550\nralf_threads=300\ndns_timeout=400"
  tasks:
    - name: Copy docker compose file from local to remote host
      copy:
        src: "clearwater/docker-compose.yaml"
        dest: "{{ docker_file }}"

    - name: Determine docker swarm manager node leader status
      shell: "docker node inspect self -f '{{ '{{' }} .ManagerStatus.Leader {{ '}}' }}'"
      register: leader_status
    - set_fact: leader={{ leader_status.stdout }}
    - debug: msg={{ leader }}
    
    - include_tasks: docker-swarm/set_hostname_label.yml
      when: leader
    - include_tasks: docker-swarm/deploy_docker_swarm_services.yml
      when:  leader
