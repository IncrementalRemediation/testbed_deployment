heat_template_version: 2015-10-15

description: One VM instance with a floating IP

parameters:
    name:
        type: string
        label: Name of the VM
    key_name:
        type: string
        label: Key Name
        constraints:
            - custom_constraint: nova.keypair
    flavor:
        type: string
        label: Flavor
        default: t1.small
        constraints:
            - custom_constraint: nova.flavor
    image:
        type: string
        label: Image Name
        constraints:
            - custom_constraint: glance.image
    external_network:
        type: string
        label: Network
        default: ext-net
        constraints:
            - custom_constraint: neutron.network
    network:
        type: string
        label: Network
        default: shared-net
        constraints:
            - custom_constraint: neutron.network
    security_groups:
        type: comma_delimited_list
        label: Security Groups
        default: ""
    availability_zone:
        type: string
        label: Availability Zone
        default: "Default"
    setup:
        type: string
        label: Additional VM initialization script (executed as ubuntu)
        default: ""
    root_setup:
        type: string
        label: Additional VM initialization script (executed as root)
        default: ""
    stack_name:
        type: string
        label: Name of the stack this VM is instantiated in (optional). Will be stored as the "stack" metadata.
        default: ""
    group:
        type: string
        label: Value for the "group" metadata item of the new VM. Used by the generate-ansible-inventory.sh script.
        default: ""
    volume_size:
        type: number
        label: Size (in GB) of the volume to create
        default: 10
    affinity_group:
        type: string
        label: ServerGroup (defines affinity for instances)
        default: ""

resources:

    cloud_init:
        type: OS::Heat::CloudConfig
        properties:
            cloud_config:
                runcmd:
                    - str_replace:
                        template: |
                            echo '$PRIVATE_KEY' > /home/ubuntu/.ssh/id_rsa
                            chmod 0600 /home/ubuntu/.ssh/id_rsa
                        params:
                            $PRIVATE_KEY: { get_file: keys/id_rsa }
                    - str_replace:
                        template: |
                            echo '$AUTHORIZED_KEYS' >> /home/ubuntu/.ssh/authorized_keys
                            chmod 0600 /home/ubuntu/.ssh/authorized_keys
                        params:
                            $AUTHORIZED_KEYS: { get_file: keys/id_rsa.pub }
                    - chown -R ubuntu:ubuntu /home/ubuntu
                    - { get_file: 'https://gitlab.tubit.tu-berlin.de/anton.gulenko/scripts/raw/master/cloud-init-basic.sh' }
                    - str_replace:
                        template: |
                            bash -s <<"xxx_CUSTOM_SETUP_CODE_xxx"
                            $THE_CODE
                            xxx_CUSTOM_SETUP_CODE_xxx
                        params:
                            $THE_CODE:
                                str_replace:
                                    template: { get_param: root_setup }
                                    params:
                                        __FLOATING_IP__: { get_attr: [ floating_ip, floating_ip_address ] }
                    - chown -R ubuntu:ubuntu /home/ubuntu
                    - str_replace:
                        template: |
                            su ubuntu -c 'bash -s' <<"xxx_CUSTOM_SETUP_CODE_xxx"
                            $THE_CODE
                            xxx_CUSTOM_SETUP_CODE_xxx
                        params:
                            $THE_CODE:
                                str_replace:
                                    template: { get_param: setup }
                                    params:
                                        __FLOATING_IP__: { get_attr: [ floating_ip, floating_ip_address ] }

    instance:
        type: OS::Nova::Server
        properties:
            name: { get_param: name }
            key_name: { get_param: key_name }
            flavor: { get_param: flavor }
            networks:
                - network: { get_param: network }
            security_groups: { get_param: security_groups }
            user_data_format: RAW
            user_data: { get_resource: cloud_init }
            metadata:
                stack: { get_param: stack_name }
                group: { get_param: group }
            availability_zone: { get_param : availability_zone }
            block_device_mapping_v2:
                - image: { get_param: image }
                  volume_size: { get_param: volume_size }
            scheduler_hints:
                group: { get_param: affinity_group }

    floating_ip:
        type: OS::Neutron::FloatingIP
        properties:
            floating_network: { get_param: external_network }

    floating_ip_association:
        type: OS::Neutron::FloatingIPAssociation
        properties:
            floatingip_id: { get_resource: floating_ip }
            port_id: { get_attr: [ instance, addresses, { get_param: network }, 0, port ] }

outputs:
    ip:
        description: IP of instance
        value: { get_attr: [ instance, first_address ] }
    public_ip:
        description: Public IP
        value: { get_attr: [ floating_ip, floating_ip_address ] }
